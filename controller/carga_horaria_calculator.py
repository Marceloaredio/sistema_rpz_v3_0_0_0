#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Calculadora de Carga Hor√°ria Especial - Sistema RPZ v3.0.0.0

Este m√≥dulo implementa a l√≥gica de c√°lculo para carga hor√°ria especial
nos crit√©rios especiais do m√≥dulo Fechamento de Ponto.

Autor: Sistema RPZ
Data: 01/08/2025
Vers√£o: 1.0
"""

from typing import Optional, Tuple
from config.feature_flags import is_carga_horaria_especial_enabled, get_carga_horaria_max_horas
import re

class CargaHorariaCalculator:
    """
    Classe para c√°lculos de carga hor√°ria especial.
    """
    
    @staticmethod
    def converter_tempo_para_minutos(tempo_str: str) -> int:
        """
        Converte tempo no formato "HH:00" para minutos.
        
        :param tempo_str: Tempo no formato "HH:00" ou "Padr√£o"
        :return: Tempo em minutos
        """
        if not tempo_str or tempo_str == 'Padr√£o':
            return 0
        
        # Validar formato
        if not CargaHorariaCalculator.validar_formato_tempo(tempo_str):
            raise ValueError(f'Formato de tempo inv√°lido: {tempo_str}. Use formato "HH:00"')
        
        # Extrair horas
        horas = int(tempo_str.split(':')[0])
        return horas * 60
    
    @staticmethod
    def converter_minutos_para_tempo(minutos: int) -> str:
        """
        Converte minutos para formato "HH:00".
        
        :param minutos: Tempo em minutos
        :return: Tempo no formato "HH:00"
        """
        if minutos == 0:
            return "00:00"
        
        horas = minutos // 60
        return f"{horas:02d}:00"
    
    @staticmethod
    def validar_formato_tempo(tempo_str: str) -> bool:
        """
        Valida se o formato de tempo est√° correto.
        
        :param tempo_str: Tempo a ser validado
        :return: True se v√°lido, False caso contr√°rio
        """
        if not tempo_str:
            return False
        
        if tempo_str == 'Padr√£o':
            return True
        
        # Validar formato HH:00 (apenas horas inteiras)
        pattern = r'^(0[0-9]|1[0-2]):00$'
        return bool(re.match(pattern, tempo_str))
    
    @staticmethod
    def calcular_carga_horaria_especial(
        criterio_especial: str,
        dia_semana: str,
        data: str,
        feriados: list,
        carga_horaria_configurada: str = 'Padr√£o'
    ) -> int:
        """
        Calcula a carga hor√°ria para crit√©rios especiais.
        
        :param criterio_especial: Crit√©rio especial (ex: "GARAGEM", "F√âRIAS")
        :param dia_semana: Dia da semana
        :param data: Data no formato DD-MM-YYYY
        :param feriados: Lista de feriados
        :param carga_horaria_configurada: Carga hor√°ria configurada no crit√©rio
        :return: Carga hor√°ria em minutos
        """
        # Verificar se a funcionalidade est√° habilitada
        if not is_carga_horaria_especial_enabled():
            # Usar l√≥gica padr√£o se funcionalidade desabilitada
            return CargaHorariaCalculator._calcular_carga_horaria_padrao(
                criterio_especial, dia_semana, data, feriados
            )
        
        # üÜï ORDEM DE PRIORIDADE CORRETA:
        # 1¬∫ Prioridade: Configura√ß√µes especiais do crit√©rio (se houver)
        if carga_horaria_configurada and carga_horaria_configurada != 'Padr√£o':
            return CargaHorariaCalculator.converter_tempo_para_minutos(carga_horaria_configurada)
        
        # 2¬∫ Prioridade: Feriados ‚Üí "00:00"
        if data in feriados:
            return 0
        
        # 3¬∫ Prioridade: Dias da Semana ‚Üí Segunda a Sexta: "08:00", S√°bado: "04:00", Domingo: "00:00"
        return CargaHorariaCalculator._calcular_carga_horaria_padrao(
            criterio_especial, dia_semana, data, feriados
        )
    
    @staticmethod
    def _calcular_carga_horaria_padrao(
        criterio_especial: str,
        dia_semana: str,
        data: str,
        feriados: list
    ) -> int:
        """
        Calcula carga hor√°ria usando l√≥gica padr√£o existente.
        
        :param criterio_especial: Crit√©rio especial
        :param dia_semana: Dia da semana
        :param data: Data
        :param feriados: Lista de feriados
        :return: Carga hor√°ria em minutos
        """
        # Crit√©rios que sempre t√™m carga hor√°ria 0
        criterios_zero = ["F√âRIAS", "ATESTADO", "AFASTAMENTO", "LIC. √ìBITO", "LIC. PATERNIDADE", "LIC. MATERNIDADE"]
        if criterio_especial.upper() in criterios_zero:
            return 0
        
        # üÜï NOTA: Feriados j√° foram verificados na fun√ß√£o principal
        # Esta fun√ß√£o agora s√≥ trata dias da semana
        
        # Domingo sempre 0
        if dia_semana.upper() == "DOMINGO":
            return 0
        
        # S√°bado: 4 horas (240 minutos)
        if dia_semana.upper() == "S√ÅBADO":
            return 240
        
        # Dias √∫teis: 8 horas (480 minutos)
        return 480
    
    @staticmethod
    def calcular_hora_extra_50_especial(
        jornada_total: int,
        carga_horaria: str,
        criterio_especial: str
    ) -> int:
        """
        Calcula hora extra 50% para crit√©rios especiais.
        
        :param jornada_total: Jornada total em minutos
        :param carga_horaria: Carga hor√°ria configurada
        :param criterio_especial: Crit√©rio especial
        :return: Hora extra 50% em minutos
        """
        # Verificar se a funcionalidade est√° habilitada
        if not is_carga_horaria_especial_enabled():
            # Usar l√≥gica padr√£o se funcionalidade desabilitada
            return CargaHorariaCalculator._calcular_hora_extra_50_padrao(
                jornada_total, criterio_especial
            )
        
        # Se crit√©rio especial tem valor espec√≠fico, usar ele
        if carga_horaria and carga_horaria != 'Padr√£o':
            carga_horaria_minutos = CargaHorariaCalculator.converter_tempo_para_minutos(carga_horaria)
            return max(-1440, jornada_total - carga_horaria_minutos)  # Limite de -24h
        
        # Caso contr√°rio, usar l√≥gica padr√£o
        return CargaHorariaCalculator._calcular_hora_extra_50_padrao(
            jornada_total, criterio_especial
        )
    
    @staticmethod
    def _calcular_hora_extra_50_padrao(jornada_total: int, criterio_especial: str) -> int:
        """
        Calcula hora extra 50% usando l√≥gica padr√£o.
        
        :param jornada_total: Jornada total em minutos
        :param criterio_especial: Crit√©rio especial
        :return: Hora extra 50% em minutos
        """
        # Crit√©rios especiais que t√™m jornada
        criterios_com_jornada = ["GARAGEM", "CARGA/DESCARGA"]
        
        if criterio_especial.upper() in criterios_com_jornada:
            # Usar jornada total informada pelo usu√°rio
            return max(0, jornada_total - 480)  # 8h padr√£o
        else:
            # Outros crit√©rios n√£o t√™m jornada
            return 0
    
    @staticmethod
    def calcular_horas_trabalhadas_especial(
        jornada_total: int,
        criterio_especial: str
    ) -> int:
        """
        Calcula horas trabalhadas para crit√©rios especiais.
        
        :param jornada_total: Jornada total em minutos
        :param criterio_especial: Crit√©rio especial
        :return: Horas trabalhadas em minutos
        """
        # Verificar se a funcionalidade est√° habilitada
        if not is_carga_horaria_especial_enabled():
            # Usar l√≥gica padr√£o se funcionalidade desabilitada
            return CargaHorariaCalculator._calcular_horas_trabalhadas_padrao(criterio_especial)
        
        # Crit√©rios especiais que t√™m jornada
        criterios_com_jornada = ["GARAGEM", "CARGA/DESCARGA"]
        
        if criterio_especial.upper() in criterios_com_jornada:
            return jornada_total  # Usar valor informado pelo usu√°rio
        else:
            return 0  # Padr√£o para outros crit√©rios
    
    @staticmethod
    def _calcular_horas_trabalhadas_padrao(criterio_especial: str) -> int:
        """
        Calcula horas trabalhadas usando l√≥gica padr√£o.
        
        :param criterio_especial: Crit√©rio especial
        :return: Horas trabalhadas em minutos
        """
        # Crit√©rios especiais que t√™m jornada
        criterios_com_jornada = ["GARAGEM", "CARGA/DESCARGA"]
        
        if criterio_especial.upper() in criterios_com_jornada:
            return 480  # 8h padr√£o
        else:
            return 0
    
    @staticmethod
    def validar_carga_horaria_configurada(carga_horaria: str) -> Tuple[bool, str]:
        """
        Valida carga hor√°ria configurada.
        
        :param carga_horaria: Carga hor√°ria a ser validada
        :return: Tupla (√©_v√°lida, mensagem_erro)
        """
        if not carga_horaria:
            return False, "Carga hor√°ria n√£o pode ser vazia"
        
        if carga_horaria == 'Padr√£o':
            return True, ""
        
        if not CargaHorariaCalculator.validar_formato_tempo(carga_horaria):
            return False, f'Formato inv√°lido: {carga_horaria}. Use "Padr√£o" ou "HH:00" (ex: "08:00")'
        
        # Verificar limite m√°ximo
        try:
            horas = int(carga_horaria.split(':')[0])
            max_horas = get_carga_horaria_max_horas()
            if horas > max_horas:
                return False, f'Horas excedem o limite m√°ximo de {max_horas}:00'
        except ValueError:
            return False, f'Valor de horas inv√°lido: {carga_horaria}'
        
        return True, ""

# Fun√ß√µes de conveni√™ncia para uso direto
def calcular_carga_horaria_especial(
    criterio_especial: str,
    dia_semana: str,
    data: str,
    feriados: list,
    carga_horaria_configurada: str = 'Padr√£o'
) -> int:
    """Fun√ß√£o de conveni√™ncia para c√°lculo de carga hor√°ria especial."""
    return CargaHorariaCalculator.calcular_carga_horaria_especial(
        criterio_especial, dia_semana, data, feriados, carga_horaria_configurada
    )

def calcular_hora_extra_50_especial(
    jornada_total: int,
    carga_horaria: str,
    criterio_especial: str
) -> int:
    """Fun√ß√£o de conveni√™ncia para c√°lculo de hora extra 50% especial."""
    return CargaHorariaCalculator.calcular_hora_extra_50_especial(
        jornada_total, carga_horaria, criterio_especial
    )

def calcular_horas_trabalhadas_especial(
    jornada_total: int,
    criterio_especial: str
) -> int:
    """Fun√ß√£o de conveni√™ncia para c√°lculo de horas trabalhadas especiais."""
    return CargaHorariaCalculator.calcular_horas_trabalhadas_especial(
        jornada_total, criterio_especial
    )

# Exemplo de uso:
if __name__ == "__main__":
    print("üßÆ Calculadora de Carga Hor√°ria Especial")
    print("=" * 50)
    
    # Testes b√°sicos
    print(f"Converter '08:00' para minutos: {CargaHorariaCalculator.converter_tempo_para_minutos('08:00')}")
    print(f"Converter 480 minutos para tempo: {CargaHorariaCalculator.converter_minutos_para_tempo(480)}")
    
    # Testes de valida√ß√£o
    print(f"Validar '08:00': {CargaHorariaCalculator.validar_formato_tempo('08:00')}")
    print(f"Validar '08:30': {CargaHorariaCalculator.validar_formato_tempo('08:30')}")
    print(f"Validar 'Padr√£o': {CargaHorariaCalculator.validar_formato_tempo('Padr√£o')}")
    
    # Testes de c√°lculo
    feriados_teste = ['25-12-2025']
    carga_horaria = calcular_carga_horaria_especial('GARAGEM', 'Segunda-feira', '25-12-2025', feriados_teste, '06:00')
    print(f"Carga hor√°ria para GARAGEM em 25/12/2025 com 06:00: {carga_horaria} minutos")
    
    he_50 = calcular_hora_extra_50_especial(600, '06:00', 'GARAGEM')
    print(f"Hora extra 50% para jornada de 10h com carga de 6h: {he_50} minutos")
