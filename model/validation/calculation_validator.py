"""
M√≥dulo de Valida√ß√£o de C√°lculos - Sistema de Fechamento de Ponto
Implementa dupla verifica√ß√£o de c√°lculos para garantir precis√£o
"""

from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional
from controller.utils import CustomLogger
import math


class CalculationValidator:
    """
    Sistema de valida√ß√£o de c√°lculos com dupla verifica√ß√£o
    """
    
    def __init__(self, logger: CustomLogger):
        self.logger = logger
        self.module_a = CalculationModuleA(logger)
        self.module_b = CalculationModuleB(logger)
    
    def validate_calculation(self, data: Dict) -> Dict:
        """
        Executa dupla verifica√ß√£o de c√°lculos
        
        Args:
            data: Dados do registro para valida√ß√£o
            
        Returns:
            Dict com resultados da valida√ß√£o
        """
        try:
            # Executar c√°lculos em ambos os m√≥dulos
            result_a = self.module_a.calculate_all(data)
            result_b = self.module_b.calculate_all(data)
            
            # Comparar resultados
            comparison = self._compare_results(result_a, result_b)
            
            if comparison['divergent']:
                self.logger.print(f"‚ö†Ô∏è DIVERG√äNCIA DETECTADA: {comparison['differences']}")
                return {
                    'status': 'divergent',
                    'module_a': result_a,
                    'module_b': result_b,
                    'differences': comparison['differences'],
                    'message': 'Diverg√™ncia detectada entre os m√≥dulos de c√°lculo'
                }
            else:
                self.logger.print("‚úÖ Valida√ß√£o de c√°lculos: Todos os valores conferem")
                return {
                    'status': 'valid',
                    'module_a': result_a,
                    'module_b': result_b,
                    'message': 'Todos os c√°lculos foram conferidos e confirmados por 2 sistemas de valida√ß√£o redundantes. Nenhuma diverg√™ncia encontrada.'
                }
                
        except Exception as e:
            self.logger.print(f"‚ùå Erro na valida√ß√£o de c√°lculos: {str(e)}")
            return {
                'status': 'error',
                'error': str(e),
                'message': 'Erro durante a valida√ß√£o de c√°lculos'
            }
    
    def _compare_results(self, result_a: Dict, result_b: Dict) -> Dict:
        """
        Compara resultados dos dois m√≥dulos
        
        Args:
            result_a: Resultados do m√≥dulo A
            result_b: Resultados do m√≥dulo B
            
        Returns:
            Dict com informa√ß√µes da compara√ß√£o
        """
        differences = []
        fields_to_compare = [
            'carga_horaria', 'hora_extra_50', 'hora_extra_100', 
            'hora_extra_noturna', 'adicional_noturno', 'diaria', 
            'ajuda_alimentacao', 'tempo_refeicao', 'tempo_intervalo', 
            'jornada_total'
        ]
        
        for field in fields_to_compare:
            value_a = result_a.get(field, 0)
            value_b = result_b.get(field, 0)
            
            # Compara√ß√£o com toler√¢ncia para valores decimais
            if isinstance(value_a, (int, float)) and isinstance(value_b, (int, float)):
                if abs(value_a - value_b) > 0.01:  # Toler√¢ncia de 0.01
                    differences.append({
                        'field': field,
                        'module_a': value_a,
                        'module_b': value_b,
                        'difference': abs(value_a - value_b)
                    })
            elif value_a != value_b:
                differences.append({
                    'field': field,
                    'module_a': value_a,
                    'module_b': value_b,
                    'difference': 'string_mismatch'
                })
        
        return {
            'divergent': len(differences) > 0,
            'differences': differences
        }
    
    def reprocess_last_15_days(self, db_connection) -> Dict:
        """
        Reprocessa registros dos √∫ltimos 15 dias
        
        Args:
            db_connection: Conex√£o com banco de dados
            
        Returns:
            Dict com resultados do reprocessamento
        """
        try:
            end_date = datetime.now()
            start_date = end_date - timedelta(days=15)
            
            self.logger.print(f"üîÑ Reprocessando registros de {start_date.strftime('%d/%m/%Y')} at√© {end_date.strftime('%d/%m/%Y')}")
            
            corrected_records = []
            
            # Reprocessar registros da tabela perm_data_fecham
            corrected_perm = self._reprocess_perm_data(db_connection, start_date, end_date)
            corrected_records.extend(corrected_perm)
            
            # Reprocessar registros da tabela dayoff_fecham
            corrected_dayoff = self._reprocess_dayoff_data(db_connection, start_date, end_date)
            corrected_records.extend(corrected_dayoff)
            
            return {
                'status': 'success',
                'corrected_records': corrected_records,
                'total_corrected': len(corrected_records),
                'period': f"{start_date.strftime('%d/%m/%Y')} - {end_date.strftime('%d/%m/%Y')}"
            }
            
        except Exception as e:
            self.logger.print(f"‚ùå Erro no reprocessamento: {str(e)}")
            return {
                'status': 'error',
                'error': str(e),
                'message': 'Erro durante reprocessamento dos √∫ltimos 15 dias'
            }
    
    def _reprocess_perm_data(self, db_connection, start_date: datetime, end_date: datetime) -> List[Dict]:
        """Reprocessa dados da tabela perm_data_fecham"""
        corrected = []
        
        # Buscar registros do per√≠odo
        query = """
        SELECT * FROM perm_data_fecham 
        WHERE data BETWEEN ? AND ?
        ORDER BY data DESC
        """
        
        # Implementar l√≥gica de reprocessamento
        # Por enquanto, retorna lista vazia
        return corrected
    
    def _reprocess_dayoff_data(self, db_connection, start_date: datetime, end_date: datetime) -> List[Dict]:
        """Reprocessa dados da tabela dayoff_fecham"""
        corrected = []
        
        # Buscar registros do per√≠odo
        query = """
        SELECT * FROM dayoff_fecham 
        WHERE data BETWEEN ? AND ?
        ORDER BY data DESC
        """
        
        # Implementar l√≥gica de reprocessamento
        # Por enquanto, retorna lista vazia
        return corrected


class CalculationModuleA:
    """
    M√≥dulo A de c√°lculos - Implementa√ß√£o principal
    """
    
    def __init__(self, logger: CustomLogger):
        self.logger = logger
    
    def calculate_all(self, data: Dict) -> Dict:
        """
        Executa todos os c√°lculos (M√≥dulo A)
        
        Args:
            data: Dados do registro
            
        Returns:
            Dict com todos os c√°lculos
        """
        try:
            # Extrair dados b√°sicos
            inicio_jornada = data.get('inicio_jornada', '')
            fim_jornada = data.get('fim_jornada', '')
            inicio_refeicao = data.get('inicio_refeicao', '')
            fim_refeicao = data.get('fim_refeicao', '')
            observacao = data.get('observacao', '')
            data_str = data.get('data', '')
            dia_semana = data.get('dia_semana', '')
            descansos = data.get('descansos', [])
            
            # C√°lculos b√°sicos
            tempo_refeicao = self._calculate_tempo_refeicao(inicio_refeicao, fim_refeicao)
            tempo_intervalo = self._calculate_tempo_intervalo(descansos)
            jornada_total = self._calculate_jornada_total(inicio_jornada, fim_jornada, tempo_intervalo, tempo_refeicao)
            
            # C√°lculos espec√≠ficos
            carga_horaria = self._calculate_carga_horaria(observacao, dia_semana, data_str)
            hora_extra_50 = self._calculate_hora_extra_50(jornada_total, carga_horaria)
            hora_extra_noturna = self._calculate_hora_extra_noturna(descansos, inicio_jornada, fim_jornada, data_str)
            adicional_noturno = self._calculate_adicional_noturno(hora_extra_noturna)
            
            # Valores monet√°rios
            diaria = self._calculate_diaria(observacao)
            ajuda_alimentacao = self._calculate_ajuda_alimentacao(observacao)
            
            return {
                'tempo_refeicao': tempo_refeicao,
                'tempo_intervalo': tempo_intervalo,
                'jornada_total': jornada_total,
                'carga_horaria': carga_horaria,
                'hora_extra_50': hora_extra_50,
                'hora_extra_100': 0,  # Implementar l√≥gica espec√≠fica
                'hora_extra_noturna': hora_extra_noturna,
                'adicional_noturno': adicional_noturno,
                'diaria': diaria,
                'ajuda_alimentacao': ajuda_alimentacao
            }
            
        except Exception as e:
            self.logger.print(f"‚ùå Erro no M√≥dulo A: {str(e)}")
            return {}
    
    def _calculate_tempo_refeicao(self, inicio: str, fim: str) -> int:
        """Calcula tempo de refei√ß√£o em minutos"""
        if not inicio or not fim:
            return 0
        
        try:
            inicio_min = self._time_to_minutes(inicio)
            fim_min = self._time_to_minutes(fim)
            
            if fim_min < inicio_min:
                fim_min += 24 * 60  # Ajuste para virada de dia
            
            return max(0, fim_min - inicio_min)
        except:
            return 0
    
    def _calculate_tempo_intervalo(self, descansos: List[Dict]) -> int:
        """Calcula tempo total de intervalos"""
        total = 0
        for descanso in descansos:
            inicio = descanso.get('inicio', '')
            fim = descanso.get('fim', '')
            total += self._calculate_tempo_refeicao(inicio, fim)
        return total
    
    def _calculate_jornada_total(self, inicio: str, fim: str, tempo_intervalo: int, tempo_refeicao: int) -> int:
        """Calcula jornada total em minutos"""
        if not inicio or not fim:
            return 0
        
        try:
            inicio_min = self._time_to_minutes(inicio)
            fim_min = self._time_to_minutes(fim)
            
            if fim_min < inicio_min:
                fim_min += 24 * 60  # Ajuste para virada de dia
            
            jornada_bruta = fim_min - inicio_min
            return max(0, jornada_bruta - tempo_intervalo - tempo_refeicao)
        except:
            return 0
    
    def _calculate_carga_horaria(self, observacao: str, dia_semana: str, data: str) -> int:
        """Calcula carga hor√°ria baseada no dia da semana"""
        # Motivos especiais que n√£o t√™m carga hor√°ria
        especiais = ["F√âRIAS", "ATESTADO", "AFASTAMENTO", "LIC. √ìBITO", "LIC. PATERNIDADE", "LIC. MATERNIDADE"]
        
        if observacao.upper() in especiais:
            return 0
        
        # Regras por dia da semana
        if dia_semana.upper() == "DOMINGO":
            return 0
        elif dia_semana.upper() == "S√ÅBADO":
            return 240  # 4 horas em minutos
        else:
            return 480  # 8 horas em minutos (dias √∫teis)
    
    def _calculate_hora_extra_50(self, jornada_total: int, carga_horaria: int) -> int:
        """Calcula hora extra 50%"""
        return max(0, jornada_total - carga_horaria)
    
    def _calculate_hora_extra_noturna(self, descansos: List[Dict], inicio: str, fim: str, data: str) -> int:
        """Calcula hora extra noturna"""
        # Implementa√ß√£o simplificada - retorna 0 por enquanto
        return 0
    
    def _calculate_adicional_noturno(self, hora_extra_noturna: int) -> int:
        """Calcula adicional noturno (20% sobre hora extra noturna)"""
        return int(hora_extra_noturna * 0.2)
    
    def _calculate_diaria(self, observacao: str) -> float:
        """Calcula valor da di√°ria baseado na observa√ß√£o"""
        # Implementar l√≥gica baseada nos crit√©rios
        return 0.0
    
    def _calculate_ajuda_alimentacao(self, observacao: str) -> float:
        """Calcula valor da ajuda de alimenta√ß√£o"""
        # Implementar l√≥gica baseada nos crit√©rios
        return 0.0
    
    def _time_to_minutes(self, time_str: str) -> int:
        """Converte string de tempo para minutos"""
        if not time_str or ':' not in time_str:
            return 0
        
        try:
            hours, minutes = map(int, time_str.split(':'))
            return hours * 60 + minutes
        except:
            return 0


class CalculationModuleB:
    """
    M√≥dulo B de c√°lculos - Implementa√ß√£o alternativa
    """
    
    def __init__(self, logger: CustomLogger):
        self.logger = logger
    
    def calculate_all(self, data: Dict) -> Dict:
        """
        Executa todos os c√°lculos (M√≥dulo B)
        
        Args:
            data: Dados do registro
            
        Returns:
            Dict com todos os c√°lculos
        """
        try:
            # Extrair dados b√°sicos
            inicio_jornada = data.get('inicio_jornada', '')
            fim_jornada = data.get('fim_jornada', '')
            inicio_refeicao = data.get('inicio_refeicao', '')
            fim_refeicao = data.get('fim_refeicao', '')
            observacao = data.get('observacao', '')
            data_str = data.get('data', '')
            dia_semana = data.get('dia_semana', '')
            descansos = data.get('descansos', [])
            
            # C√°lculos b√°sicos (implementa√ß√£o alternativa)
            tempo_refeicao = self._calculate_tempo_refeicao_alt(inicio_refeicao, fim_refeicao)
            tempo_intervalo = self._calculate_tempo_intervalo_alt(descansos)
            jornada_total = self._calculate_jornada_total_alt(inicio_jornada, fim_jornada, tempo_intervalo, tempo_refeicao)
            
            # C√°lculos espec√≠ficos
            carga_horaria = self._calculate_carga_horaria_alt(observacao, dia_semana, data_str)
            hora_extra_50 = self._calculate_hora_extra_50_alt(jornada_total, carga_horaria)
            hora_extra_noturna = self._calculate_hora_extra_noturna_alt(descansos, inicio_jornada, fim_jornada, data_str)
            adicional_noturno = self._calculate_adicional_noturno_alt(hora_extra_noturna)
            
            # Valores monet√°rios
            diaria = self._calculate_diaria_alt(observacao)
            ajuda_alimentacao = self._calculate_ajuda_alimentacao_alt(observacao)
            
            return {
                'tempo_refeicao': tempo_refeicao,
                'tempo_intervalo': tempo_intervalo,
                'jornada_total': jornada_total,
                'carga_horaria': carga_horaria,
                'hora_extra_50': hora_extra_50,
                'hora_extra_100': 0,  # Implementar l√≥gica espec√≠fica
                'hora_extra_noturna': hora_extra_noturna,
                'adicional_noturno': adicional_noturno,
                'diaria': diaria,
                'ajuda_alimentacao': ajuda_alimentacao
            }
            
        except Exception as e:
            self.logger.print(f"‚ùå Erro no M√≥dulo B: {str(e)}")
            return {}
    
    def _calculate_tempo_refeicao_alt(self, inicio: str, fim: str) -> int:
        """Calcula tempo de refei√ß√£o em minutos (implementa√ß√£o alternativa)"""
        if not inicio or not fim:
            return 0
        
        try:
            # Implementa√ß√£o alternativa usando datetime
            from datetime import datetime
            
            inicio_dt = datetime.strptime(inicio, '%H:%M')
            fim_dt = datetime.strptime(fim, '%H:%M')
            
            diff = fim_dt - inicio_dt
            minutes = int(diff.total_seconds() / 60)
            
            if minutes < 0:
                minutes += 24 * 60  # Ajuste para virada de dia
            
            return max(0, minutes)
        except:
            return 0
    
    def _calculate_tempo_intervalo_alt(self, descansos: List[Dict]) -> int:
        """Calcula tempo total de intervalos (implementa√ß√£o alternativa)"""
        total = 0
        for descanso in descansos:
            inicio = descanso.get('inicio', '')
            fim = descanso.get('fim', '')
            total += self._calculate_tempo_refeicao_alt(inicio, fim)
        return total
    
    def _calculate_jornada_total_alt(self, inicio: str, fim: str, tempo_intervalo: int, tempo_refeicao: int) -> int:
        """Calcula jornada total em minutos (implementa√ß√£o alternativa)"""
        if not inicio or not fim:
            return 0
        
        try:
            from datetime import datetime
            
            inicio_dt = datetime.strptime(inicio, '%H:%M')
            fim_dt = datetime.strptime(fim, '%H:%M')
            
            diff = fim_dt - inicio_dt
            jornada_bruta = int(diff.total_seconds() / 60)
            
            if jornada_bruta < 0:
                jornada_bruta += 24 * 60  # Ajuste para virada de dia
            
            return max(0, jornada_bruta - tempo_intervalo - tempo_refeicao)
        except:
            return 0
    
    def _calculate_carga_horaria_alt(self, observacao: str, dia_semana: str, data: str) -> int:
        """Calcula carga hor√°ria (implementa√ß√£o alternativa)"""
        # Motivos especiais que n√£o t√™m carga hor√°ria
        especiais = ["F√âRIAS", "ATESTADO", "AFASTAMENTO", "LIC. √ìBITO", "LIC. PATERNIDADE", "LIC. MATERNIDADE"]
        
        if observacao.upper() in especiais:
            return 0
        
        # Regras por dia da semana (implementa√ß√£o alternativa)
        dia_upper = dia_semana.upper()
        if "DOMINGO" in dia_upper:
            return 0
        elif "S√ÅBADO" in dia_upper:
            return 240  # 4 horas em minutos
        else:
            return 480  # 8 horas em minutos (dias √∫teis)
    
    def _calculate_hora_extra_50_alt(self, jornada_total: int, carga_horaria: int) -> int:
        """Calcula hora extra 50% (implementa√ß√£o alternativa)"""
        return max(0, jornada_total - carga_horaria)
    
    def _calculate_hora_extra_noturna_alt(self, descansos: List[Dict], inicio: str, fim: str, data: str) -> int:
        """Calcula hora extra noturna (implementa√ß√£o alternativa)"""
        # Implementa√ß√£o alternativa - retorna 0 por enquanto
        return 0
    
    def _calculate_adicional_noturno_alt(self, hora_extra_noturna: int) -> int:
        """Calcula adicional noturno (implementa√ß√£o alternativa)"""
        return int(hora_extra_noturna * 0.2)
    
    def _calculate_diaria_alt(self, observacao: str) -> float:
        """Calcula valor da di√°ria (implementa√ß√£o alternativa)"""
        # Implementar l√≥gica baseada nos crit√©rios
        return 0.0
    
    def _calculate_ajuda_alimentacao_alt(self, observacao: str) -> float:
        """Calcula valor da ajuda de alimenta√ß√£o (implementa√ß√£o alternativa)"""
        # Implementar l√≥gica baseada nos crit√©rios
        return 0.0 