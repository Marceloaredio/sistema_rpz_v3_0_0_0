#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para importar dados do Excel "Novos dados motorists" para a tabela motorists
"""

import pandas as pd
import sqlite3
import os
import sys
from datetime import datetime
import re

def clean_cpf_cnh(value):
    """Limpa CPF e CNH removendo pontos e h√≠fens"""
    if pd.isna(value):
        return None
    return str(value).replace('.', '').replace('-', '').strip()

def clean_rg(value):
    """Limpa RG removendo pontos e h√≠fens, mantendo n√∫meros e letras"""
    if pd.isna(value):
        return None
    return str(value).replace('.', '').replace('-', '').strip()

def clean_phone(value):
    """Formata telefone para o padr√£o (##) #####-####"""
    if pd.isna(value):
        return None
    
    # Remove todos os caracteres n√£o num√©ricos
    phone = re.sub(r'\D', '', str(value))
    
    if len(phone) == 11:
        return f"({phone[:2]}) {phone[2:7]}-{phone[7:]}"
    elif len(phone) == 10:
        return f"({phone[:2]}) {phone[2:6]}-{phone[6:]}"
    else:
        return str(value)

def convert_date(value):
    """Converte data do Excel para formato dd/mm/aaaa"""
    if pd.isna(value):
        return None
    
    try:
        # Se for datetime do pandas
        if isinstance(value, pd.Timestamp):
            return value.strftime('%d/%m/%Y')
        
        # Se for string no formato dd/mm/aaaa
        if isinstance(value, str) and '/' in value:
            return value  # Manter formato original
        
        # Se for n√∫mero (data do Excel)
        if isinstance(value, (int, float)):
            date = pd.to_datetime('1899-12-30') + pd.Timedelta(days=int(value))
            return date.strftime('%d/%m/%Y')
            
    except:
        pass
    
    return str(value) if value else None

def validate_required_fields(row):
    """Valida campos obrigat√≥rios"""
    required_fields = {
        'nome': 'Nome',
        'cpf': 'CPF',
        'cnh': 'CNH',
        'rg': 'RG',
        'operacao': 'Opera√ß√£o',
        'ctps': 'CTPS',
        'serie': 'S√©rie',
        'data_nascimento': 'Data de Nascimento',
        'primeira_cnh': 'Primeira CNH',
        'data_expedicao': 'Data da Expedi√ß√£o',
        'vencimento_cnh': 'Vencimento CNH',
        'telefone': 'Telefone',
        'endereco': 'Endere√ßo',
        'filiacao': 'Filia√ß√£o',
        'estado_civil': 'Estado Civil',
        'filhos': 'Filhos',
        'cargo': 'Cargo',
        'empresa': 'Empresa'
    }
    
    missing_fields = []
    for field, display_name in required_fields.items():
        if pd.isna(row.get(field)) or str(row.get(field)).strip() == '':
            missing_fields.append(display_name)
    
    return missing_fields

def get_next_id(cursor):
    """Obt√©m o pr√≥ximo ID dispon√≠vel"""
    cursor.execute("SELECT MAX(id) FROM motorists")
    result = cursor.fetchone()
    max_id = result[0] if result[0] else 0
    return max_id + 1

def check_duplicates(cursor, cpf, nome):
    """Verifica duplicatas por CPF e nome"""
    duplicates = []
    
    if cpf:
        cursor.execute("SELECT id, nome FROM motorists WHERE cpf = ?", (cpf,))
        existing = cursor.fetchone()
        if existing:
            duplicates.append(f"CPF j√° existe (ID: {existing[0]}, Nome: {existing[1]})")
    
    if nome:
        cursor.execute("SELECT id, cpf FROM motorists WHERE nome = ?", (nome,))
        existing = cursor.fetchone()
        if existing:
            duplicates.append(f"Nome j√° existe (ID: {existing[0]}, CPF: {existing[1]})")
    
    return duplicates

def import_excel_to_database(excel_file_path, db_path):
    """Importa dados do Excel para o banco de dados"""
    
    print(f"üöÄ Iniciando importa√ß√£o do arquivo: {excel_file_path}")
    print(f"üìä Banco de dados: {db_path}")
    
    # Verificar se o arquivo Excel existe
    if not os.path.exists(excel_file_path):
        print(f"‚ùå Arquivo n√£o encontrado: {excel_file_path}")
        return False
    
    # Verificar se o banco de dados existe
    if not os.path.exists(db_path):
        print(f"‚ùå Banco de dados n√£o encontrado: {db_path}")
        return False
    
    try:
        # Ler o arquivo Excel
        print("üìñ Lendo arquivo Excel...")
        df = pd.read_excel(excel_file_path)
        
        print(f"‚úÖ Arquivo lido com sucesso! Encontradas {len(df)} linhas")
        print(f"üìã Colunas encontradas: {list(df.columns)}")
        
        # Conectar ao banco de dados
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Contadores
        total_rows = len(df)
        imported_count = 0
        skipped_count = 0
        error_count = 0
        
        print(f"\nüîÑ Processando {total_rows} registros...")
        
        for index, row in df.iterrows():
            try:
                print(f"\n--- Processando linha {index + 1}/{total_rows} ---")
                
                # Validar campos obrigat√≥rios
                missing_fields = validate_required_fields(row)
                if missing_fields:
                    print(f"‚ö†Ô∏è  Campos obrigat√≥rios faltando: {', '.join(missing_fields)}")
                    skipped_count += 1
                    continue
                
                # Limpar e processar dados
                nome = str(row.get('nome', '')).strip().upper()
                cpf = clean_cpf_cnh(row.get('cpf'))
                cnh = clean_cpf_cnh(row.get('cnh'))
                rg = clean_rg(row.get('rg'))
                codigo_sap = clean_cpf_cnh(row.get('codigo_sap'))
                operacao = str(row.get('operacao', '')).strip().upper()
                ctps = str(row.get('ctps', '')).strip()
                if ctps.endswith('.0'):
                    ctps = ctps[:-2]
                serie = str(row.get('serie', '')).strip()
                telefone = clean_phone(row.get('telefone'))
                endereco = str(row.get('endereco', '')).strip()
                filiacao = str(row.get('filiacao', '')).strip()
                estado_civil = str(row.get('estado_civil', '')).strip().upper()
                filhos = str(row.get('filhos', '0')).strip()
                if filhos.endswith('.0'):
                    filhos = filhos[:-2]
                cargo = str(row.get('cargo', '')).strip().upper()
                empresa = str(row.get('empresa', '')).strip()
                email = str(row.get('email', '')).strip()
                
                # Converter datas
                data_admissao = convert_date(row.get('data_admissao'))
                data_nascimento = convert_date(row.get('data_nascimento'))
                primeira_cnh = convert_date(row.get('primeira_cnh'))
                data_expedicao = convert_date(row.get('data_expedicao'))
                vencimento_cnh = convert_date(row.get('vencimento_cnh'))
                done_mopp = convert_date(row.get('done_mopp'))
                vencimento_mopp = convert_date(row.get('vencimento_mopp'))
                done_toxicologico_clt = convert_date(row.get('done_toxicologico_clt'))
                vencimento_toxicologico_clt = convert_date(row.get('vencimento_toxicologico_clt'))
                done_aso_semestral = convert_date(row.get('done_aso_semestral'))
                vencimento_aso_semestral = convert_date(row.get('vencimento_aso_semestral'))
                done_aso_periodico = convert_date(row.get('done_aso_periodico'))
                vencimento_aso_periodico = convert_date(row.get('vencimento_aso_periodico'))
                done_buoony = convert_date(row.get('done_buoony'))
                vencimento_buonny = convert_date(row.get('vencimento_buonny'))
                done_toxicologico_cnh = convert_date(row.get('done_toxicologico_cnh'))
                vencimento_toxicologico_cnh = convert_date(row.get('vencimento_toxicologico_cnh'))
                
                # Valida√ß√µes espec√≠ficas
                if cpf and len(cpf) != 11:
                    print(f"‚ö†Ô∏è  CPF inv√°lido: {cpf} (deve ter 11 d√≠gitos)")
                    skipped_count += 1
                    continue
                
                if cnh and len(cnh) != 11:
                    print(f"‚ö†Ô∏è  CNH inv√°lida: {cnh} (deve ter 11 d√≠gitos)")
                    skipped_count += 1
                    continue
                
                # Verificar se o ID j√° existe
                cursor.execute("SELECT nome FROM motorists WHERE id = ?", (motorist_id,))
                existing_motorist = cursor.fetchone()
                if existing_motorist:
                    print(f"‚ö†Ô∏è  ID {motorist_id} j√° existe (Nome: {existing_motorist[0]})")
                    skipped_count += 1
                    continue
                
                # Verificar duplicatas
                duplicates = check_duplicates(cursor, cpf, nome)
                if duplicates:
                    print(f"‚ö†Ô∏è  Duplicatas encontradas: {'; '.join(duplicates)}")
                    skipped_count += 1
                    continue
                
                # Usar o ID da planilha
                motorist_id = int(row.get('id', 0))
                if motorist_id == 0:
                    print(f"‚ö†Ô∏è  ID inv√°lido na linha {index + 1}")
                    skipped_count += 1
                    continue
                
                # Preparar dados para inser√ß√£o
                motorist_data = (
                    motorist_id, nome, data_admissao, cpf, cnh, rg, codigo_sap, operacao, ctps, serie,
                    data_nascimento, primeira_cnh, data_expedicao, vencimento_cnh, done_mopp,
                    vencimento_mopp, done_toxicologico_clt, vencimento_toxicologico_clt, done_aso_semestral,
                    vencimento_aso_semestral, done_aso_periodico, vencimento_aso_periodico,
                    done_buoony, vencimento_buonny, telefone, endereco, filiacao, estado_civil,
                    filhos, cargo, empresa, 'Ativo', 'Inativo', 'Inativo', done_toxicologico_cnh,
                    vencimento_toxicologico_cnh, email
                )
                
                # Inserir no banco
                query = """INSERT INTO motorists (
                    id, nome, data_admissao, cpf, cnh, rg, codigo_sap, operacao, ctps, serie, 
                    data_nascimento, primeira_cnh, data_expedicao, vencimento_cnh, done_mopp, 
                    vencimento_mopp, done_toxicologico_clt, vencimento_toxicologico_clt, done_aso_semestral, 
                    vencimento_aso_semestral, done_aso_periodico, vencimento_aso_periodico, 
                    done_buoony, vencimento_buonny, telefone, endereco, filiacao, estado_civil, 
                    filhos, cargo, empresa, status, conf_jornada, conf_fecham, done_toxicologico_cnh,
                    vencimento_toxicologico_cnh, email
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"""
                
                cursor.execute(query, motorist_data)
                conn.commit()
                
                print(f"‚úÖ Motorista importado com sucesso! ID: {motorist_id}, Nome: {nome}")
                imported_count += 1
                
            except Exception as e:
                print(f"‚ùå Erro ao processar linha {index + 1}: {str(e)}")
                error_count += 1
        
        # Fechar conex√£o
        conn.close()
        
        # Relat√≥rio final
        print(f"\nüìä RELAT√ìRIO FINAL:")
        print(f"‚úÖ Importados com sucesso: {imported_count}")
        print(f"‚ö†Ô∏è  Ignorados (duplicatas/erros): {skipped_count}")
        print(f"‚ùå Erros: {error_count}")
        print(f"üìã Total processado: {total_rows}")
        
        if imported_count > 0:
            print(f"\nüéâ Importa√ß√£o conclu√≠da com sucesso! {imported_count} motoristas foram adicionados ao banco de dados.")
            return True
        else:
            print(f"\n‚ö†Ô∏è  Nenhum motorista foi importado. Verifique os dados do Excel.")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro durante a importa√ß√£o: {str(e)}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üöÄ IMPORTADOR DE MOTORISTAS - EXCEL PARA BANCO DE DADOS")
    print("=" * 60)
    
    # Configurar caminhos
    excel_file = "Novos dados motorists.xlsx"
    db_file = "dbs/db_app.db"
    
    # Verificar se o arquivo Excel existe
    if not os.path.exists(excel_file):
        print(f"‚ùå Arquivo Excel n√£o encontrado: {excel_file}")
        print("üìÅ Certifique-se de que o arquivo 'Novos dados motorists.xlsx' est√° na mesma pasta deste script.")
        return
    
    # Verificar se o banco de dados existe
    if not os.path.exists(db_file):
        print(f"‚ùå Banco de dados n√£o encontrado: {db_file}")
        print("üìÅ Certifique-se de que o arquivo db_app.db est√° na pasta dbs/")
        return
    
    # Confirmar importa√ß√£o
    print(f"üìã Arquivo Excel: {excel_file}")
    print(f"üóÑÔ∏è  Banco de dados: {db_file}")
    print("\n‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o ir√° adicionar novos motoristas ao banco de dados.")
    print("   Duplicatas por CPF ou nome ser√£o ignoradas.")
    
    response = input("\nü§î Deseja continuar? (s/n): ").lower().strip()
    if response not in ['s', 'sim', 'y', 'yes']:
        print("‚ùå Importa√ß√£o cancelada pelo usu√°rio.")
        return
    
    # Executar importa√ß√£o
    success = import_excel_to_database(excel_file, db_file)
    
    if success:
        print("\n‚úÖ Importa√ß√£o conclu√≠da com sucesso!")
    else:
        print("\n‚ùå Importa√ß√£o falhou. Verifique os logs acima.")

if __name__ == "__main__":
    main() 