"""
Servi√ßo de Integra√ß√£o da Valida√ß√£o de C√°lculos
Integra o sistema de valida√ß√£o com as rotas existentes
"""

from flask import jsonify, request
from model.validation.calculation_validator import CalculationValidator
from controller.utils import CustomLogger
from datetime import datetime, timedelta
import json


class ValidationService:
    """
    Servi√ßo de integra√ß√£o da valida√ß√£o de c√°lculos
    """
    
    def __init__(self, logger: CustomLogger):
        self.logger = logger
        self.validator = CalculationValidator(logger)
    
    def validate_on_save(self, data: dict, db_connection) -> dict:
        """
        Valida c√°lculos ao salvar um registro
        
        Args:
            data: Dados do registro
            db_connection: Conex√£o com banco de dados
            
        Returns:
            Dict com resultado da valida√ß√£o
        """
        try:
            # Preparar dados para valida√ß√£o
            validation_data = self._prepare_validation_data(data)
            
            # Executar valida√ß√£o
            validation_result = self.validator.validate_calculation(validation_data)
            
            # Se h√° diverg√™ncia, reprocessar √∫ltimos 15 dias
            if validation_result.get('status') == 'divergent':
                self.logger.print("üîÑ Diverg√™ncia detectada, iniciando reprocessamento dos √∫ltimos 15 dias...")
                reprocess_result = self.validator.reprocess_last_15_days(db_connection)
                
                validation_result['reprocess_result'] = reprocess_result
                validation_result['message'] = f"Diverg√™ncia detectada entre os m√≥dulos de c√°lculo. {reprocess_result.get('total_corrected', 0)} registros foram reprocessados."
            
            return validation_result
            
        except Exception as e:
            self.logger.print(f"‚ùå Erro no servi√ßo de valida√ß√£o: {str(e)}")
            return {
                'status': 'error',
                'error': str(e),
                'message': 'Erro durante a valida√ß√£o de c√°lculos'
            }
    
    def validate_on_view(self, data: dict) -> dict:
        """
        Valida c√°lculos ao visualizar um registro
        
        Args:
            data: Dados do registro
            
        Returns:
            Dict com resultado da valida√ß√£o
        """
        try:
            # Preparar dados para valida√ß√£o
            validation_data = self._prepare_validation_data(data)
            
            # Executar valida√ß√£o
            validation_result = self.validator.validate_calculation(validation_data)
            
            return validation_result
            
        except Exception as e:
            self.logger.print(f"‚ùå Erro na valida√ß√£o de visualiza√ß√£o: {str(e)}")
            return {
                'status': 'error',
                'error': str(e),
                'message': 'Erro durante a valida√ß√£o de c√°lculos'
            }
    
    def _prepare_validation_data(self, data: dict) -> dict:
        """
        Prepara dados para valida√ß√£o
        
        Args:
            data: Dados brutos do registro
            
        Returns:
            Dict com dados formatados para valida√ß√£o
        """
        # Extrair dados b√°sicos
        validation_data = {
            'inicio_jornada': data.get('inicio_jornada', ''),
            'fim_jornada': data.get('fim_jornada', ''),
            'inicio_refeicao': data.get('inicio_refeicao', ''),
            'fim_refeicao': data.get('fim_refeicao', ''),
            'observacao': data.get('observacao', ''),
            'data': data.get('data', ''),
            'dia_semana': data.get('dia_semana', ''),
            'descansos': data.get('descansos', [])
        }
        
        # Se descansos n√£o estiverem no formato esperado, tentar extrair
        if not validation_data['descansos']:
            validation_data['descansos'] = self._extract_descansos(data)
        
        return validation_data
    
    def _extract_descansos(self, data: dict) -> list:
        """
        Extrai dados de descansos do registro
        
        Args:
            data: Dados do registro
            
        Returns:
            Lista de descansos
        """
        descansos = []
        
        # Tentar extrair descansos de diferentes formatos
        for i in range(1, 9):  # M√°ximo 8 descansos
            inicio_key = f'in_desc_{i}'
            fim_key = f'fim_desc_{i}'
            
            if inicio_key in data and fim_key in data:
                inicio = data.get(inicio_key, '')
                fim = data.get(fim_key, '')
                
                if inicio and fim:
                    descansos.append({
                        'inicio': inicio,
                        'fim': fim
                    })
        
        return descansos


def create_validation_routes(app, logger: CustomLogger):
    """
    Cria rotas de valida√ß√£o para a aplica√ß√£o
    
    Args:
        app: Inst√¢ncia do Flask
        logger: Logger customizado
    """
    validation_service = ValidationService(logger)
    
    @app.route('/api/validation/validate-calculation', methods=['POST'])
    def validate_calculation():
        """
        Rota para validar c√°lculos de um registro
        """
        try:
            data = request.get_json()
            
            if not data:
                return jsonify({
                    'status': 'error',
                    'message': 'Dados n√£o fornecidos'
                }), 400
            
            # Executar valida√ß√£o
            result = validation_service.validate_on_view(data)
            
            return jsonify(result)
            
        except Exception as e:
            logger.print(f"‚ùå Erro na rota de valida√ß√£o: {str(e)}")
            return jsonify({
                'status': 'error',
                'error': str(e),
                'message': 'Erro interno do servidor'
            }), 500
    
    @app.route('/api/validation/reprocess-period', methods=['POST'])
    def reprocess_period():
        """
        Rota para reprocessar um per√≠odo espec√≠fico
        """
        try:
            data = request.get_json()
            start_date = data.get('start_date')
            end_date = data.get('end_date')
            
            if not start_date or not end_date:
                return jsonify({
                    'status': 'error',
                    'message': 'Datas de in√≠cio e fim s√£o obrigat√≥rias'
                }), 400
            
            # Implementar reprocessamento de per√≠odo espec√≠fico
            # Por enquanto, retorna sucesso
            return jsonify({
                'status': 'success',
                'message': f'Per√≠odo reprocessado: {start_date} at√© {end_date}',
                'corrected_records': 0
            })
            
        except Exception as e:
            logger.print(f"‚ùå Erro no reprocessamento de per√≠odo: {str(e)}")
            return jsonify({
                'status': 'error',
                'error': str(e),
                'message': 'Erro interno do servidor'
            }), 500
    
    return validation_service 